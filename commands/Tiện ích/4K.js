const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

const cachePath = './cache';

module.exports = {
    data: new SlashCommandBuilder()
        .setName('enhance-image')
        .setDescription('TƒÉng ƒë·ªô ph√¢n gi·∫£i h√¨nh ·∫£nh khi reply tin nh·∫Øn c√≥ h√¨nh ·∫£nh.'),
    async execute(interaction) {
        await interaction.reply('üì∏ Vui l√≤ng reply v√†o tin nh·∫Øn c√≥ h√¨nh ·∫£nh ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng v√† nh·∫≠p **OK**.');
        const filter = (msg) => msg.author.id === interaction.user.id && msg.content.toLowerCase() === 'ok';

        const collector = interaction.channel.createMessageCollector({ filter, time: 30000 });

        collector.on('collect', async (msg) => {
            if (!msg.reference) {
                await msg.reply('‚ö†Ô∏è B·∫°n ch∆∞a reply v√†o tin nh·∫Øn c√≥ h√¨nh ·∫£nh.');
                return;
            }

            const referencedMessage = await msg.channel.messages.fetch(msg.reference.messageId);
            const attachment = referencedMessage.attachments.first();

            if (!attachment || !attachment.contentType.startsWith('image/')) {
                await msg.reply('‚ùå Tin nh·∫Øn b·∫°n reply kh√¥ng ch·ª©a h√¨nh ·∫£nh.');
                return;
            }

            try {
                // G·ªçi API ƒë·ªÉ tƒÉng ƒë·ªô ph√¢n gi·∫£i
                const response = await axios.get(`https://4k-ayoub.vercel.app/upscale?url=${encodeURIComponent(attachment.url)}`, {
                    responseType: 'arraybuffer',
                });

                if (response.status !== 200) {
                    await msg.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω h√¨nh ·∫£nh.');
                    return;
                }

                // ƒê·∫£m b·∫£o th∆∞ m·ª•c cache t·ªìn t·∫°i
                await fs.ensureDir(cachePath);

                // L∆∞u ·∫£nh k·∫øt qu·∫£ v√†o file t·∫°m
                const filePath = path.join(cachePath, `${Date.now()}-4k.png`);
                await fs.outputFile(filePath, response.data);

                // G·ª≠i l·∫°i ·∫£nh ƒë√£ n√¢ng cao ƒë·ªô ph√¢n gi·∫£i cho ng∆∞·ªùi d√πng
                const enhancedImage = new AttachmentBuilder(filePath, { name: 'enhanced-image.png' });
                await msg.reply({ content: '‚úÖ H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c n√¢ng cao ch·∫•t l∆∞·ª£ng!', files: [enhancedImage] });

                // X√≥a file t·∫°m sau khi g·ª≠i
                setTimeout(() => fs.unlinkSync(filePath), 60000); // X√≥a sau 1 ph√∫t
            } catch (error) {
                console.error(error);
                await msg.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh.');
            }

            collector.stop();
        });

        collector.on('end', async (_, reason) => {
            if (reason === 'time') {
                await interaction.followUp('‚è∞ H·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        });
    },
};

