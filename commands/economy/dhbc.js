const { SlashCommandBuilder } = require('discord.js');
const axios = require('axios');

let gameState = {};

module.exports = {
  data: new SlashCommandBuilder()
    .setName('dhbc')
    .setDescription('Ch∆°i tr√≤ ch∆°i ƒêu·ªïi H√¨nh B·∫Øt Ch·ªØ v·ªõi emoji.')
    .addStringOption(option =>
      option.setName('action')
        .setDescription('Ch·ªçn h√†nh ƒë·ªông: guess (hi·ªÉn th·ªã emoji) ho·∫∑c rep (tr·∫£ l·ªùi emoji)')
        .setRequired(true)
        .addChoices(
          { name: 'Guess', value: 'guess' },
          { name: 'Rep', value: 'rep' }
        )
    )
    .addStringOption(option =>
      option.setName('answer')
        .setDescription('Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n (ch·ªâ khi ch·ªçn rep)')
        .setRequired(false)),

  async execute(interaction) {
    const userId = interaction.user.id;
    const action = interaction.options.getString('action');
    const userAnswer = interaction.options.getString('answer');

    if (!gameState[userId]) {
      gameState[userId] = {
        emoji1: null,
        emoji2: null,
        correctAnswer: null
      };
    }

    switch (action) {
      case 'guess':
        try {
          const response = await axios.get('https://nguyenmanh.name.vn/api/dhbcemoji?apikey=PlUDcXkI');
          const { emoji1, emoji2, wordcomplete } = response.data.result;

          gameState[userId] = {
            emoji1: emoji1,
            emoji2: emoji2,
            correctAnswer: wordcomplete
          };

          await interaction.reply(`üîç ƒêo√°n t·ª´ qua emoji: ${emoji1} ${emoji2}`);
        } catch (error) {
          console.error('L·ªói khi g·ªçi API:', error);
          await interaction.reply('ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
        break;

      case 'rep':
        if (!gameState[userId].correctAnswer) {
          await interaction.reply('Vui l√≤ng s·ª≠ d·ª•ng l·ªánh guess tr∆∞·ªõc khi tr·∫£ l·ªùi.');
          return;
        }

        if (userAnswer && userAnswer.trim().toUpperCase() === gameState[userId].correctAnswer.toUpperCase()) {
          await interaction.reply(`üéâ Ch√≠nh x√°c! ƒê√°p √°n l√† **${gameState[userId].correctAnswer}**.`);
        } else {
          await interaction.reply(`‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† **${gameState[userId].correctAnswer}**.`);
        }

        // Reset game state v√† ch·ªù 3 gi√¢y tr∆∞·ªõc khi cho ph√©p ch∆°i ti·∫øp
        setTimeout(() => {
          gameState[userId] = {
            emoji1: null,
            emoji2: null,
            correctAnswer: null
          };
          interaction.followUp('B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng l·ªánh sau 3 gi√¢y!');
        }, 3000);
        break;
    }
  }
};
